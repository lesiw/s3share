// Code generated by lesiw.io/moxie. DO NOT EDIT.

package main

import (
	unsafe "unsafe"
	context "context"
	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	sync "sync"
)

var _S3Client = new(sync.Map)

type _S3ClientData struct {
	AbortMultipartUploadOverride func(ctx context.Context, params *s3.AbortMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.AbortMultipartUploadOutput, error)
	CompleteMultipartUploadOverride func(ctx context.Context, params *s3.CompleteMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.CompleteMultipartUploadOutput, error)
	CopyObjectOverride func(ctx context.Context, params *s3.CopyObjectInput, optFns ...func(*s3.Options)) (*s3.CopyObjectOutput, error)
	CreateBucketOverride func(ctx context.Context, params *s3.CreateBucketInput, optFns ...func(*s3.Options)) (*s3.CreateBucketOutput, error)
	CreateMultipartUploadOverride func(ctx context.Context, params *s3.CreateMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.CreateMultipartUploadOutput, error)
	DeleteBucketOverride func(ctx context.Context, params *s3.DeleteBucketInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketOutput, error)
	DeleteBucketAnalyticsConfigurationOverride func(ctx context.Context, params *s3.DeleteBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketAnalyticsConfigurationOutput, error)
	DeleteBucketCorsOverride func(ctx context.Context, params *s3.DeleteBucketCorsInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketCorsOutput, error)
	DeleteBucketEncryptionOverride func(ctx context.Context, params *s3.DeleteBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketEncryptionOutput, error)
	DeleteBucketIntelligentTieringConfigurationOverride func(ctx context.Context, params *s3.DeleteBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error)
	DeleteBucketInventoryConfigurationOverride func(ctx context.Context, params *s3.DeleteBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketInventoryConfigurationOutput, error)
	DeleteBucketLifecycleOverride func(ctx context.Context, params *s3.DeleteBucketLifecycleInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketLifecycleOutput, error)
	DeleteBucketMetricsConfigurationOverride func(ctx context.Context, params *s3.DeleteBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketMetricsConfigurationOutput, error)
	DeleteBucketOwnershipControlsOverride func(ctx context.Context, params *s3.DeleteBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketOwnershipControlsOutput, error)
	DeleteBucketPolicyOverride func(ctx context.Context, params *s3.DeleteBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketPolicyOutput, error)
	DeleteBucketReplicationOverride func(ctx context.Context, params *s3.DeleteBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketReplicationOutput, error)
	DeleteBucketTaggingOverride func(ctx context.Context, params *s3.DeleteBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketTaggingOutput, error)
	DeleteBucketWebsiteOverride func(ctx context.Context, params *s3.DeleteBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketWebsiteOutput, error)
	DeleteObjectOverride func(ctx context.Context, params *s3.DeleteObjectInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectOutput, error)
	DeleteObjectTaggingOverride func(ctx context.Context, params *s3.DeleteObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectTaggingOutput, error)
	DeleteObjectsOverride func(ctx context.Context, params *s3.DeleteObjectsInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectsOutput, error)
	DeletePublicAccessBlockOverride func(ctx context.Context, params *s3.DeletePublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.DeletePublicAccessBlockOutput, error)
	GetBucketAccelerateConfigurationOverride func(ctx context.Context, params *s3.GetBucketAccelerateConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketAccelerateConfigurationOutput, error)
	GetBucketAclOverride func(ctx context.Context, params *s3.GetBucketAclInput, optFns ...func(*s3.Options)) (*s3.GetBucketAclOutput, error)
	GetBucketAnalyticsConfigurationOverride func(ctx context.Context, params *s3.GetBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketAnalyticsConfigurationOutput, error)
	GetBucketCorsOverride func(ctx context.Context, params *s3.GetBucketCorsInput, optFns ...func(*s3.Options)) (*s3.GetBucketCorsOutput, error)
	GetBucketEncryptionOverride func(ctx context.Context, params *s3.GetBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.GetBucketEncryptionOutput, error)
	GetBucketIntelligentTieringConfigurationOverride func(ctx context.Context, params *s3.GetBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketIntelligentTieringConfigurationOutput, error)
	GetBucketInventoryConfigurationOverride func(ctx context.Context, params *s3.GetBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketInventoryConfigurationOutput, error)
	GetBucketLifecycleConfigurationOverride func(ctx context.Context, params *s3.GetBucketLifecycleConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketLifecycleConfigurationOutput, error)
	GetBucketLocationOverride func(ctx context.Context, params *s3.GetBucketLocationInput, optFns ...func(*s3.Options)) (*s3.GetBucketLocationOutput, error)
	GetBucketLoggingOverride func(ctx context.Context, params *s3.GetBucketLoggingInput, optFns ...func(*s3.Options)) (*s3.GetBucketLoggingOutput, error)
	GetBucketMetricsConfigurationOverride func(ctx context.Context, params *s3.GetBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketMetricsConfigurationOutput, error)
	GetBucketNotificationConfigurationOverride func(ctx context.Context, params *s3.GetBucketNotificationConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketNotificationConfigurationOutput, error)
	GetBucketOwnershipControlsOverride func(ctx context.Context, params *s3.GetBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.GetBucketOwnershipControlsOutput, error)
	GetBucketPolicyOverride func(ctx context.Context, params *s3.GetBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.GetBucketPolicyOutput, error)
	GetBucketPolicyStatusOverride func(ctx context.Context, params *s3.GetBucketPolicyStatusInput, optFns ...func(*s3.Options)) (*s3.GetBucketPolicyStatusOutput, error)
	GetBucketReplicationOverride func(ctx context.Context, params *s3.GetBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.GetBucketReplicationOutput, error)
	GetBucketRequestPaymentOverride func(ctx context.Context, params *s3.GetBucketRequestPaymentInput, optFns ...func(*s3.Options)) (*s3.GetBucketRequestPaymentOutput, error)
	GetBucketTaggingOverride func(ctx context.Context, params *s3.GetBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.GetBucketTaggingOutput, error)
	GetBucketVersioningOverride func(ctx context.Context, params *s3.GetBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error)
	GetBucketWebsiteOverride func(ctx context.Context, params *s3.GetBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.GetBucketWebsiteOutput, error)
	GetObjectOverride func(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error)
	GetObjectAclOverride func(ctx context.Context, params *s3.GetObjectAclInput, optFns ...func(*s3.Options)) (*s3.GetObjectAclOutput, error)
	GetObjectAttributesOverride func(ctx context.Context, params *s3.GetObjectAttributesInput, optFns ...func(*s3.Options)) (*s3.GetObjectAttributesOutput, error)
	GetObjectLegalHoldOverride func(ctx context.Context, params *s3.GetObjectLegalHoldInput, optFns ...func(*s3.Options)) (*s3.GetObjectLegalHoldOutput, error)
	GetObjectLockConfigurationOverride func(ctx context.Context, params *s3.GetObjectLockConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetObjectLockConfigurationOutput, error)
	GetObjectRetentionOverride func(ctx context.Context, params *s3.GetObjectRetentionInput, optFns ...func(*s3.Options)) (*s3.GetObjectRetentionOutput, error)
	GetObjectTaggingOverride func(ctx context.Context, params *s3.GetObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.GetObjectTaggingOutput, error)
	GetObjectTorrentOverride func(ctx context.Context, params *s3.GetObjectTorrentInput, optFns ...func(*s3.Options)) (*s3.GetObjectTorrentOutput, error)
	GetPublicAccessBlockOverride func(ctx context.Context, params *s3.GetPublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.GetPublicAccessBlockOutput, error)
	HeadBucketOverride func(ctx context.Context, params *s3.HeadBucketInput, optFns ...func(*s3.Options)) (*s3.HeadBucketOutput, error)
	HeadObjectOverride func(ctx context.Context, params *s3.HeadObjectInput, optFns ...func(*s3.Options)) (*s3.HeadObjectOutput, error)
	ListBucketAnalyticsConfigurationsOverride func(ctx context.Context, params *s3.ListBucketAnalyticsConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketAnalyticsConfigurationsOutput, error)
	ListBucketIntelligentTieringConfigurationsOverride func(ctx context.Context, params *s3.ListBucketIntelligentTieringConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error)
	ListBucketInventoryConfigurationsOverride func(ctx context.Context, params *s3.ListBucketInventoryConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketInventoryConfigurationsOutput, error)
	ListBucketMetricsConfigurationsOverride func(ctx context.Context, params *s3.ListBucketMetricsConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketMetricsConfigurationsOutput, error)
	ListBucketsOverride func(ctx context.Context, params *s3.ListBucketsInput, optFns ...func(*s3.Options)) (*s3.ListBucketsOutput, error)
	ListMultipartUploadsOverride func(ctx context.Context, params *s3.ListMultipartUploadsInput, optFns ...func(*s3.Options)) (*s3.ListMultipartUploadsOutput, error)
	ListObjectVersionsOverride func(ctx context.Context, params *s3.ListObjectVersionsInput, optFns ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error)
	ListObjectsOverride func(ctx context.Context, params *s3.ListObjectsInput, optFns ...func(*s3.Options)) (*s3.ListObjectsOutput, error)
	ListObjectsV2Override func(ctx context.Context, params *s3.ListObjectsV2Input, optFns ...func(*s3.Options)) (*s3.ListObjectsV2Output, error)
	ListPartsOverride func(ctx context.Context, params *s3.ListPartsInput, optFns ...func(*s3.Options)) (*s3.ListPartsOutput, error)
	PutBucketAccelerateConfigurationOverride func(ctx context.Context, params *s3.PutBucketAccelerateConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketAccelerateConfigurationOutput, error)
	PutBucketAclOverride func(ctx context.Context, params *s3.PutBucketAclInput, optFns ...func(*s3.Options)) (*s3.PutBucketAclOutput, error)
	PutBucketAnalyticsConfigurationOverride func(ctx context.Context, params *s3.PutBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketAnalyticsConfigurationOutput, error)
	PutBucketCorsOverride func(ctx context.Context, params *s3.PutBucketCorsInput, optFns ...func(*s3.Options)) (*s3.PutBucketCorsOutput, error)
	PutBucketEncryptionOverride func(ctx context.Context, params *s3.PutBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.PutBucketEncryptionOutput, error)
	PutBucketIntelligentTieringConfigurationOverride func(ctx context.Context, params *s3.PutBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketIntelligentTieringConfigurationOutput, error)
	PutBucketInventoryConfigurationOverride func(ctx context.Context, params *s3.PutBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketInventoryConfigurationOutput, error)
	PutBucketLifecycleConfigurationOverride func(ctx context.Context, params *s3.PutBucketLifecycleConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketLifecycleConfigurationOutput, error)
	PutBucketLoggingOverride func(ctx context.Context, params *s3.PutBucketLoggingInput, optFns ...func(*s3.Options)) (*s3.PutBucketLoggingOutput, error)
	PutBucketMetricsConfigurationOverride func(ctx context.Context, params *s3.PutBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketMetricsConfigurationOutput, error)
	PutBucketNotificationConfigurationOverride func(ctx context.Context, params *s3.PutBucketNotificationConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketNotificationConfigurationOutput, error)
	PutBucketOwnershipControlsOverride func(ctx context.Context, params *s3.PutBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.PutBucketOwnershipControlsOutput, error)
	PutBucketPolicyOverride func(ctx context.Context, params *s3.PutBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.PutBucketPolicyOutput, error)
	PutBucketReplicationOverride func(ctx context.Context, params *s3.PutBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.PutBucketReplicationOutput, error)
	PutBucketRequestPaymentOverride func(ctx context.Context, params *s3.PutBucketRequestPaymentInput, optFns ...func(*s3.Options)) (*s3.PutBucketRequestPaymentOutput, error)
	PutBucketTaggingOverride func(ctx context.Context, params *s3.PutBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.PutBucketTaggingOutput, error)
	PutBucketVersioningOverride func(ctx context.Context, params *s3.PutBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.PutBucketVersioningOutput, error)
	PutBucketWebsiteOverride func(ctx context.Context, params *s3.PutBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.PutBucketWebsiteOutput, error)
	PutObjectOverride func(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error)
	PutObjectAclOverride func(ctx context.Context, params *s3.PutObjectAclInput, optFns ...func(*s3.Options)) (*s3.PutObjectAclOutput, error)
	PutObjectLegalHoldOverride func(ctx context.Context, params *s3.PutObjectLegalHoldInput, optFns ...func(*s3.Options)) (*s3.PutObjectLegalHoldOutput, error)
	PutObjectLockConfigurationOverride func(ctx context.Context, params *s3.PutObjectLockConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutObjectLockConfigurationOutput, error)
	PutObjectRetentionOverride func(ctx context.Context, params *s3.PutObjectRetentionInput, optFns ...func(*s3.Options)) (*s3.PutObjectRetentionOutput, error)
	PutObjectTaggingOverride func(ctx context.Context, params *s3.PutObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.PutObjectTaggingOutput, error)
	PutPublicAccessBlockOverride func(ctx context.Context, params *s3.PutPublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.PutPublicAccessBlockOutput, error)
	RestoreObjectOverride func(ctx context.Context, params *s3.RestoreObjectInput, optFns ...func(*s3.Options)) (*s3.RestoreObjectOutput, error)
	SelectObjectContentOverride func(ctx context.Context, params *s3.SelectObjectContentInput, optFns ...func(*s3.Options)) (*s3.SelectObjectContentOutput, error)
	UploadPartOverride func(ctx context.Context, params *s3.UploadPartInput, optFns ...func(*s3.Options)) (*s3.UploadPartOutput, error)
	UploadPartCopyOverride func(ctx context.Context, params *s3.UploadPartCopyInput, optFns ...func(*s3.Options)) (*s3.UploadPartCopyOutput, error)
	WriteGetObjectResponseOverride func(ctx context.Context, params *s3.WriteGetObjectResponseInput, optFns ...func(*s3.Options)) (*s3.WriteGetObjectResponseOutput, error)
}

func (_recv *S3Client) AbortMultipartUpload(ctx context.Context, params *s3.AbortMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.AbortMultipartUploadOutput, error) {
	if _recv == nil {
		panic("S3Client.AbortMultipartUpload: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.AbortMultipartUploadOverride != nil {
		return _dat.AbortMultipartUploadOverride(ctx, params, optFns...)
	}
	return _recv.Client.AbortMultipartUpload(ctx, params, optFns...)
}

func (_recv *S3Client) _AbortMultipartUpload_Patch(fn func (ctx context.Context, params *s3.AbortMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.AbortMultipartUploadOutput, error)) {
	if _recv == nil {
		panic("S3Client.AbortMultipartUpload: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.AbortMultipartUploadOverride = fn
}

func (_recv *S3Client) CompleteMultipartUpload(ctx context.Context, params *s3.CompleteMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.CompleteMultipartUploadOutput, error) {
	if _recv == nil {
		panic("S3Client.CompleteMultipartUpload: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.CompleteMultipartUploadOverride != nil {
		return _dat.CompleteMultipartUploadOverride(ctx, params, optFns...)
	}
	return _recv.Client.CompleteMultipartUpload(ctx, params, optFns...)
}

func (_recv *S3Client) _CompleteMultipartUpload_Patch(fn func (ctx context.Context, params *s3.CompleteMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.CompleteMultipartUploadOutput, error)) {
	if _recv == nil {
		panic("S3Client.CompleteMultipartUpload: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.CompleteMultipartUploadOverride = fn
}

func (_recv *S3Client) CopyObject(ctx context.Context, params *s3.CopyObjectInput, optFns ...func(*s3.Options)) (*s3.CopyObjectOutput, error) {
	if _recv == nil {
		panic("S3Client.CopyObject: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.CopyObjectOverride != nil {
		return _dat.CopyObjectOverride(ctx, params, optFns...)
	}
	return _recv.Client.CopyObject(ctx, params, optFns...)
}

func (_recv *S3Client) _CopyObject_Patch(fn func (ctx context.Context, params *s3.CopyObjectInput, optFns ...func(*s3.Options)) (*s3.CopyObjectOutput, error)) {
	if _recv == nil {
		panic("S3Client.CopyObject: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.CopyObjectOverride = fn
}

func (_recv *S3Client) CreateBucket(ctx context.Context, params *s3.CreateBucketInput, optFns ...func(*s3.Options)) (*s3.CreateBucketOutput, error) {
	if _recv == nil {
		panic("S3Client.CreateBucket: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.CreateBucketOverride != nil {
		return _dat.CreateBucketOverride(ctx, params, optFns...)
	}
	return _recv.Client.CreateBucket(ctx, params, optFns...)
}

func (_recv *S3Client) _CreateBucket_Patch(fn func (ctx context.Context, params *s3.CreateBucketInput, optFns ...func(*s3.Options)) (*s3.CreateBucketOutput, error)) {
	if _recv == nil {
		panic("S3Client.CreateBucket: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.CreateBucketOverride = fn
}

func (_recv *S3Client) CreateMultipartUpload(ctx context.Context, params *s3.CreateMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.CreateMultipartUploadOutput, error) {
	if _recv == nil {
		panic("S3Client.CreateMultipartUpload: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.CreateMultipartUploadOverride != nil {
		return _dat.CreateMultipartUploadOverride(ctx, params, optFns...)
	}
	return _recv.Client.CreateMultipartUpload(ctx, params, optFns...)
}

func (_recv *S3Client) _CreateMultipartUpload_Patch(fn func (ctx context.Context, params *s3.CreateMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.CreateMultipartUploadOutput, error)) {
	if _recv == nil {
		panic("S3Client.CreateMultipartUpload: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.CreateMultipartUploadOverride = fn
}

func (_recv *S3Client) DeleteBucket(ctx context.Context, params *s3.DeleteBucketInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteBucket: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteBucketOverride != nil {
		return _dat.DeleteBucketOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteBucket(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteBucket_Patch(fn func (ctx context.Context, params *s3.DeleteBucketInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteBucket: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteBucketOverride = fn
}

func (_recv *S3Client) DeleteBucketAnalyticsConfiguration(ctx context.Context, params *s3.DeleteBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteBucketAnalyticsConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteBucketAnalyticsConfigurationOverride != nil {
		return _dat.DeleteBucketAnalyticsConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteBucketAnalyticsConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteBucketAnalyticsConfiguration_Patch(fn func (ctx context.Context, params *s3.DeleteBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketAnalyticsConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteBucketAnalyticsConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteBucketAnalyticsConfigurationOverride = fn
}

func (_recv *S3Client) DeleteBucketCors(ctx context.Context, params *s3.DeleteBucketCorsInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketCorsOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteBucketCors: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteBucketCorsOverride != nil {
		return _dat.DeleteBucketCorsOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteBucketCors(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteBucketCors_Patch(fn func (ctx context.Context, params *s3.DeleteBucketCorsInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketCorsOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteBucketCors: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteBucketCorsOverride = fn
}

func (_recv *S3Client) DeleteBucketEncryption(ctx context.Context, params *s3.DeleteBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketEncryptionOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteBucketEncryption: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteBucketEncryptionOverride != nil {
		return _dat.DeleteBucketEncryptionOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteBucketEncryption(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteBucketEncryption_Patch(fn func (ctx context.Context, params *s3.DeleteBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketEncryptionOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteBucketEncryption: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteBucketEncryptionOverride = fn
}

func (_recv *S3Client) DeleteBucketIntelligentTieringConfiguration(ctx context.Context, params *s3.DeleteBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteBucketIntelligentTieringConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteBucketIntelligentTieringConfigurationOverride != nil {
		return _dat.DeleteBucketIntelligentTieringConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteBucketIntelligentTieringConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteBucketIntelligentTieringConfiguration_Patch(fn func (ctx context.Context, params *s3.DeleteBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteBucketIntelligentTieringConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteBucketIntelligentTieringConfigurationOverride = fn
}

func (_recv *S3Client) DeleteBucketInventoryConfiguration(ctx context.Context, params *s3.DeleteBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteBucketInventoryConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteBucketInventoryConfigurationOverride != nil {
		return _dat.DeleteBucketInventoryConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteBucketInventoryConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteBucketInventoryConfiguration_Patch(fn func (ctx context.Context, params *s3.DeleteBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketInventoryConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteBucketInventoryConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteBucketInventoryConfigurationOverride = fn
}

func (_recv *S3Client) DeleteBucketLifecycle(ctx context.Context, params *s3.DeleteBucketLifecycleInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketLifecycleOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteBucketLifecycle: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteBucketLifecycleOverride != nil {
		return _dat.DeleteBucketLifecycleOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteBucketLifecycle(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteBucketLifecycle_Patch(fn func (ctx context.Context, params *s3.DeleteBucketLifecycleInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketLifecycleOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteBucketLifecycle: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteBucketLifecycleOverride = fn
}

func (_recv *S3Client) DeleteBucketMetricsConfiguration(ctx context.Context, params *s3.DeleteBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteBucketMetricsConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteBucketMetricsConfigurationOverride != nil {
		return _dat.DeleteBucketMetricsConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteBucketMetricsConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteBucketMetricsConfiguration_Patch(fn func (ctx context.Context, params *s3.DeleteBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketMetricsConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteBucketMetricsConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteBucketMetricsConfigurationOverride = fn
}

func (_recv *S3Client) DeleteBucketOwnershipControls(ctx context.Context, params *s3.DeleteBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketOwnershipControlsOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteBucketOwnershipControls: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteBucketOwnershipControlsOverride != nil {
		return _dat.DeleteBucketOwnershipControlsOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteBucketOwnershipControls(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteBucketOwnershipControls_Patch(fn func (ctx context.Context, params *s3.DeleteBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketOwnershipControlsOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteBucketOwnershipControls: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteBucketOwnershipControlsOverride = fn
}

func (_recv *S3Client) DeleteBucketPolicy(ctx context.Context, params *s3.DeleteBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketPolicyOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteBucketPolicy: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteBucketPolicyOverride != nil {
		return _dat.DeleteBucketPolicyOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteBucketPolicy(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteBucketPolicy_Patch(fn func (ctx context.Context, params *s3.DeleteBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketPolicyOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteBucketPolicy: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteBucketPolicyOverride = fn
}

func (_recv *S3Client) DeleteBucketReplication(ctx context.Context, params *s3.DeleteBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketReplicationOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteBucketReplication: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteBucketReplicationOverride != nil {
		return _dat.DeleteBucketReplicationOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteBucketReplication(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteBucketReplication_Patch(fn func (ctx context.Context, params *s3.DeleteBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketReplicationOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteBucketReplication: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteBucketReplicationOverride = fn
}

func (_recv *S3Client) DeleteBucketTagging(ctx context.Context, params *s3.DeleteBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketTaggingOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteBucketTagging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteBucketTaggingOverride != nil {
		return _dat.DeleteBucketTaggingOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteBucketTagging(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteBucketTagging_Patch(fn func (ctx context.Context, params *s3.DeleteBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketTaggingOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteBucketTagging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteBucketTaggingOverride = fn
}

func (_recv *S3Client) DeleteBucketWebsite(ctx context.Context, params *s3.DeleteBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketWebsiteOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteBucketWebsite: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteBucketWebsiteOverride != nil {
		return _dat.DeleteBucketWebsiteOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteBucketWebsite(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteBucketWebsite_Patch(fn func (ctx context.Context, params *s3.DeleteBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketWebsiteOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteBucketWebsite: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteBucketWebsiteOverride = fn
}

func (_recv *S3Client) DeleteObject(ctx context.Context, params *s3.DeleteObjectInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteObject: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteObjectOverride != nil {
		return _dat.DeleteObjectOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteObject(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteObject_Patch(fn func (ctx context.Context, params *s3.DeleteObjectInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteObject: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteObjectOverride = fn
}

func (_recv *S3Client) DeleteObjectTagging(ctx context.Context, params *s3.DeleteObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectTaggingOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteObjectTagging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteObjectTaggingOverride != nil {
		return _dat.DeleteObjectTaggingOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteObjectTagging(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteObjectTagging_Patch(fn func (ctx context.Context, params *s3.DeleteObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectTaggingOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteObjectTagging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteObjectTaggingOverride = fn
}

func (_recv *S3Client) DeleteObjects(ctx context.Context, params *s3.DeleteObjectsInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectsOutput, error) {
	if _recv == nil {
		panic("S3Client.DeleteObjects: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeleteObjectsOverride != nil {
		return _dat.DeleteObjectsOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeleteObjects(ctx, params, optFns...)
}

func (_recv *S3Client) _DeleteObjects_Patch(fn func (ctx context.Context, params *s3.DeleteObjectsInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectsOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeleteObjects: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeleteObjectsOverride = fn
}

func (_recv *S3Client) DeletePublicAccessBlock(ctx context.Context, params *s3.DeletePublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.DeletePublicAccessBlockOutput, error) {
	if _recv == nil {
		panic("S3Client.DeletePublicAccessBlock: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.DeletePublicAccessBlockOverride != nil {
		return _dat.DeletePublicAccessBlockOverride(ctx, params, optFns...)
	}
	return _recv.Client.DeletePublicAccessBlock(ctx, params, optFns...)
}

func (_recv *S3Client) _DeletePublicAccessBlock_Patch(fn func (ctx context.Context, params *s3.DeletePublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.DeletePublicAccessBlockOutput, error)) {
	if _recv == nil {
		panic("S3Client.DeletePublicAccessBlock: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.DeletePublicAccessBlockOverride = fn
}

func (_recv *S3Client) GetBucketAccelerateConfiguration(ctx context.Context, params *s3.GetBucketAccelerateConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketAccelerateConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketAccelerateConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketAccelerateConfigurationOverride != nil {
		return _dat.GetBucketAccelerateConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketAccelerateConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketAccelerateConfiguration_Patch(fn func (ctx context.Context, params *s3.GetBucketAccelerateConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketAccelerateConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketAccelerateConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketAccelerateConfigurationOverride = fn
}

func (_recv *S3Client) GetBucketAcl(ctx context.Context, params *s3.GetBucketAclInput, optFns ...func(*s3.Options)) (*s3.GetBucketAclOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketAcl: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketAclOverride != nil {
		return _dat.GetBucketAclOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketAcl(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketAcl_Patch(fn func (ctx context.Context, params *s3.GetBucketAclInput, optFns ...func(*s3.Options)) (*s3.GetBucketAclOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketAcl: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketAclOverride = fn
}

func (_recv *S3Client) GetBucketAnalyticsConfiguration(ctx context.Context, params *s3.GetBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketAnalyticsConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketAnalyticsConfigurationOverride != nil {
		return _dat.GetBucketAnalyticsConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketAnalyticsConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketAnalyticsConfiguration_Patch(fn func (ctx context.Context, params *s3.GetBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketAnalyticsConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketAnalyticsConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketAnalyticsConfigurationOverride = fn
}

func (_recv *S3Client) GetBucketCors(ctx context.Context, params *s3.GetBucketCorsInput, optFns ...func(*s3.Options)) (*s3.GetBucketCorsOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketCors: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketCorsOverride != nil {
		return _dat.GetBucketCorsOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketCors(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketCors_Patch(fn func (ctx context.Context, params *s3.GetBucketCorsInput, optFns ...func(*s3.Options)) (*s3.GetBucketCorsOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketCors: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketCorsOverride = fn
}

func (_recv *S3Client) GetBucketEncryption(ctx context.Context, params *s3.GetBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.GetBucketEncryptionOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketEncryption: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketEncryptionOverride != nil {
		return _dat.GetBucketEncryptionOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketEncryption(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketEncryption_Patch(fn func (ctx context.Context, params *s3.GetBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.GetBucketEncryptionOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketEncryption: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketEncryptionOverride = fn
}

func (_recv *S3Client) GetBucketIntelligentTieringConfiguration(ctx context.Context, params *s3.GetBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketIntelligentTieringConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketIntelligentTieringConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketIntelligentTieringConfigurationOverride != nil {
		return _dat.GetBucketIntelligentTieringConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketIntelligentTieringConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketIntelligentTieringConfiguration_Patch(fn func (ctx context.Context, params *s3.GetBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketIntelligentTieringConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketIntelligentTieringConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketIntelligentTieringConfigurationOverride = fn
}

func (_recv *S3Client) GetBucketInventoryConfiguration(ctx context.Context, params *s3.GetBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketInventoryConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketInventoryConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketInventoryConfigurationOverride != nil {
		return _dat.GetBucketInventoryConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketInventoryConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketInventoryConfiguration_Patch(fn func (ctx context.Context, params *s3.GetBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketInventoryConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketInventoryConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketInventoryConfigurationOverride = fn
}

func (_recv *S3Client) GetBucketLifecycleConfiguration(ctx context.Context, params *s3.GetBucketLifecycleConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketLifecycleConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketLifecycleConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketLifecycleConfigurationOverride != nil {
		return _dat.GetBucketLifecycleConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketLifecycleConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketLifecycleConfiguration_Patch(fn func (ctx context.Context, params *s3.GetBucketLifecycleConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketLifecycleConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketLifecycleConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketLifecycleConfigurationOverride = fn
}

func (_recv *S3Client) GetBucketLocation(ctx context.Context, params *s3.GetBucketLocationInput, optFns ...func(*s3.Options)) (*s3.GetBucketLocationOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketLocation: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketLocationOverride != nil {
		return _dat.GetBucketLocationOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketLocation(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketLocation_Patch(fn func (ctx context.Context, params *s3.GetBucketLocationInput, optFns ...func(*s3.Options)) (*s3.GetBucketLocationOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketLocation: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketLocationOverride = fn
}

func (_recv *S3Client) GetBucketLogging(ctx context.Context, params *s3.GetBucketLoggingInput, optFns ...func(*s3.Options)) (*s3.GetBucketLoggingOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketLogging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketLoggingOverride != nil {
		return _dat.GetBucketLoggingOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketLogging(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketLogging_Patch(fn func (ctx context.Context, params *s3.GetBucketLoggingInput, optFns ...func(*s3.Options)) (*s3.GetBucketLoggingOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketLogging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketLoggingOverride = fn
}

func (_recv *S3Client) GetBucketMetricsConfiguration(ctx context.Context, params *s3.GetBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketMetricsConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketMetricsConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketMetricsConfigurationOverride != nil {
		return _dat.GetBucketMetricsConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketMetricsConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketMetricsConfiguration_Patch(fn func (ctx context.Context, params *s3.GetBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketMetricsConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketMetricsConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketMetricsConfigurationOverride = fn
}

func (_recv *S3Client) GetBucketNotificationConfiguration(ctx context.Context, params *s3.GetBucketNotificationConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketNotificationConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketNotificationConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketNotificationConfigurationOverride != nil {
		return _dat.GetBucketNotificationConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketNotificationConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketNotificationConfiguration_Patch(fn func (ctx context.Context, params *s3.GetBucketNotificationConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketNotificationConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketNotificationConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketNotificationConfigurationOverride = fn
}

func (_recv *S3Client) GetBucketOwnershipControls(ctx context.Context, params *s3.GetBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.GetBucketOwnershipControlsOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketOwnershipControls: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketOwnershipControlsOverride != nil {
		return _dat.GetBucketOwnershipControlsOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketOwnershipControls(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketOwnershipControls_Patch(fn func (ctx context.Context, params *s3.GetBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.GetBucketOwnershipControlsOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketOwnershipControls: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketOwnershipControlsOverride = fn
}

func (_recv *S3Client) GetBucketPolicy(ctx context.Context, params *s3.GetBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.GetBucketPolicyOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketPolicy: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketPolicyOverride != nil {
		return _dat.GetBucketPolicyOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketPolicy(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketPolicy_Patch(fn func (ctx context.Context, params *s3.GetBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.GetBucketPolicyOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketPolicy: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketPolicyOverride = fn
}

func (_recv *S3Client) GetBucketPolicyStatus(ctx context.Context, params *s3.GetBucketPolicyStatusInput, optFns ...func(*s3.Options)) (*s3.GetBucketPolicyStatusOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketPolicyStatus: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketPolicyStatusOverride != nil {
		return _dat.GetBucketPolicyStatusOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketPolicyStatus(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketPolicyStatus_Patch(fn func (ctx context.Context, params *s3.GetBucketPolicyStatusInput, optFns ...func(*s3.Options)) (*s3.GetBucketPolicyStatusOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketPolicyStatus: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketPolicyStatusOverride = fn
}

func (_recv *S3Client) GetBucketReplication(ctx context.Context, params *s3.GetBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.GetBucketReplicationOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketReplication: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketReplicationOverride != nil {
		return _dat.GetBucketReplicationOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketReplication(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketReplication_Patch(fn func (ctx context.Context, params *s3.GetBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.GetBucketReplicationOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketReplication: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketReplicationOverride = fn
}

func (_recv *S3Client) GetBucketRequestPayment(ctx context.Context, params *s3.GetBucketRequestPaymentInput, optFns ...func(*s3.Options)) (*s3.GetBucketRequestPaymentOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketRequestPayment: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketRequestPaymentOverride != nil {
		return _dat.GetBucketRequestPaymentOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketRequestPayment(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketRequestPayment_Patch(fn func (ctx context.Context, params *s3.GetBucketRequestPaymentInput, optFns ...func(*s3.Options)) (*s3.GetBucketRequestPaymentOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketRequestPayment: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketRequestPaymentOverride = fn
}

func (_recv *S3Client) GetBucketTagging(ctx context.Context, params *s3.GetBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.GetBucketTaggingOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketTagging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketTaggingOverride != nil {
		return _dat.GetBucketTaggingOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketTagging(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketTagging_Patch(fn func (ctx context.Context, params *s3.GetBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.GetBucketTaggingOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketTagging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketTaggingOverride = fn
}

func (_recv *S3Client) GetBucketVersioning(ctx context.Context, params *s3.GetBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketVersioning: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketVersioningOverride != nil {
		return _dat.GetBucketVersioningOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketVersioning(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketVersioning_Patch(fn func (ctx context.Context, params *s3.GetBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketVersioning: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketVersioningOverride = fn
}

func (_recv *S3Client) GetBucketWebsite(ctx context.Context, params *s3.GetBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.GetBucketWebsiteOutput, error) {
	if _recv == nil {
		panic("S3Client.GetBucketWebsite: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetBucketWebsiteOverride != nil {
		return _dat.GetBucketWebsiteOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetBucketWebsite(ctx, params, optFns...)
}

func (_recv *S3Client) _GetBucketWebsite_Patch(fn func (ctx context.Context, params *s3.GetBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.GetBucketWebsiteOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetBucketWebsite: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetBucketWebsiteOverride = fn
}

func (_recv *S3Client) GetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	if _recv == nil {
		panic("S3Client.GetObject: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetObjectOverride != nil {
		return _dat.GetObjectOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetObject(ctx, params, optFns...)
}

func (_recv *S3Client) _GetObject_Patch(fn func (ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetObject: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetObjectOverride = fn
}

func (_recv *S3Client) GetObjectAcl(ctx context.Context, params *s3.GetObjectAclInput, optFns ...func(*s3.Options)) (*s3.GetObjectAclOutput, error) {
	if _recv == nil {
		panic("S3Client.GetObjectAcl: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetObjectAclOverride != nil {
		return _dat.GetObjectAclOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetObjectAcl(ctx, params, optFns...)
}

func (_recv *S3Client) _GetObjectAcl_Patch(fn func (ctx context.Context, params *s3.GetObjectAclInput, optFns ...func(*s3.Options)) (*s3.GetObjectAclOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetObjectAcl: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetObjectAclOverride = fn
}

func (_recv *S3Client) GetObjectAttributes(ctx context.Context, params *s3.GetObjectAttributesInput, optFns ...func(*s3.Options)) (*s3.GetObjectAttributesOutput, error) {
	if _recv == nil {
		panic("S3Client.GetObjectAttributes: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetObjectAttributesOverride != nil {
		return _dat.GetObjectAttributesOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetObjectAttributes(ctx, params, optFns...)
}

func (_recv *S3Client) _GetObjectAttributes_Patch(fn func (ctx context.Context, params *s3.GetObjectAttributesInput, optFns ...func(*s3.Options)) (*s3.GetObjectAttributesOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetObjectAttributes: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetObjectAttributesOverride = fn
}

func (_recv *S3Client) GetObjectLegalHold(ctx context.Context, params *s3.GetObjectLegalHoldInput, optFns ...func(*s3.Options)) (*s3.GetObjectLegalHoldOutput, error) {
	if _recv == nil {
		panic("S3Client.GetObjectLegalHold: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetObjectLegalHoldOverride != nil {
		return _dat.GetObjectLegalHoldOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetObjectLegalHold(ctx, params, optFns...)
}

func (_recv *S3Client) _GetObjectLegalHold_Patch(fn func (ctx context.Context, params *s3.GetObjectLegalHoldInput, optFns ...func(*s3.Options)) (*s3.GetObjectLegalHoldOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetObjectLegalHold: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetObjectLegalHoldOverride = fn
}

func (_recv *S3Client) GetObjectLockConfiguration(ctx context.Context, params *s3.GetObjectLockConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetObjectLockConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.GetObjectLockConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetObjectLockConfigurationOverride != nil {
		return _dat.GetObjectLockConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetObjectLockConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _GetObjectLockConfiguration_Patch(fn func (ctx context.Context, params *s3.GetObjectLockConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetObjectLockConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetObjectLockConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetObjectLockConfigurationOverride = fn
}

func (_recv *S3Client) GetObjectRetention(ctx context.Context, params *s3.GetObjectRetentionInput, optFns ...func(*s3.Options)) (*s3.GetObjectRetentionOutput, error) {
	if _recv == nil {
		panic("S3Client.GetObjectRetention: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetObjectRetentionOverride != nil {
		return _dat.GetObjectRetentionOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetObjectRetention(ctx, params, optFns...)
}

func (_recv *S3Client) _GetObjectRetention_Patch(fn func (ctx context.Context, params *s3.GetObjectRetentionInput, optFns ...func(*s3.Options)) (*s3.GetObjectRetentionOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetObjectRetention: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetObjectRetentionOverride = fn
}

func (_recv *S3Client) GetObjectTagging(ctx context.Context, params *s3.GetObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.GetObjectTaggingOutput, error) {
	if _recv == nil {
		panic("S3Client.GetObjectTagging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetObjectTaggingOverride != nil {
		return _dat.GetObjectTaggingOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetObjectTagging(ctx, params, optFns...)
}

func (_recv *S3Client) _GetObjectTagging_Patch(fn func (ctx context.Context, params *s3.GetObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.GetObjectTaggingOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetObjectTagging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetObjectTaggingOverride = fn
}

func (_recv *S3Client) GetObjectTorrent(ctx context.Context, params *s3.GetObjectTorrentInput, optFns ...func(*s3.Options)) (*s3.GetObjectTorrentOutput, error) {
	if _recv == nil {
		panic("S3Client.GetObjectTorrent: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetObjectTorrentOverride != nil {
		return _dat.GetObjectTorrentOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetObjectTorrent(ctx, params, optFns...)
}

func (_recv *S3Client) _GetObjectTorrent_Patch(fn func (ctx context.Context, params *s3.GetObjectTorrentInput, optFns ...func(*s3.Options)) (*s3.GetObjectTorrentOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetObjectTorrent: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetObjectTorrentOverride = fn
}

func (_recv *S3Client) GetPublicAccessBlock(ctx context.Context, params *s3.GetPublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.GetPublicAccessBlockOutput, error) {
	if _recv == nil {
		panic("S3Client.GetPublicAccessBlock: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.GetPublicAccessBlockOverride != nil {
		return _dat.GetPublicAccessBlockOverride(ctx, params, optFns...)
	}
	return _recv.Client.GetPublicAccessBlock(ctx, params, optFns...)
}

func (_recv *S3Client) _GetPublicAccessBlock_Patch(fn func (ctx context.Context, params *s3.GetPublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.GetPublicAccessBlockOutput, error)) {
	if _recv == nil {
		panic("S3Client.GetPublicAccessBlock: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.GetPublicAccessBlockOverride = fn
}

func (_recv *S3Client) HeadBucket(ctx context.Context, params *s3.HeadBucketInput, optFns ...func(*s3.Options)) (*s3.HeadBucketOutput, error) {
	if _recv == nil {
		panic("S3Client.HeadBucket: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.HeadBucketOverride != nil {
		return _dat.HeadBucketOverride(ctx, params, optFns...)
	}
	return _recv.Client.HeadBucket(ctx, params, optFns...)
}

func (_recv *S3Client) _HeadBucket_Patch(fn func (ctx context.Context, params *s3.HeadBucketInput, optFns ...func(*s3.Options)) (*s3.HeadBucketOutput, error)) {
	if _recv == nil {
		panic("S3Client.HeadBucket: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.HeadBucketOverride = fn
}

func (_recv *S3Client) HeadObject(ctx context.Context, params *s3.HeadObjectInput, optFns ...func(*s3.Options)) (*s3.HeadObjectOutput, error) {
	if _recv == nil {
		panic("S3Client.HeadObject: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.HeadObjectOverride != nil {
		return _dat.HeadObjectOverride(ctx, params, optFns...)
	}
	return _recv.Client.HeadObject(ctx, params, optFns...)
}

func (_recv *S3Client) _HeadObject_Patch(fn func (ctx context.Context, params *s3.HeadObjectInput, optFns ...func(*s3.Options)) (*s3.HeadObjectOutput, error)) {
	if _recv == nil {
		panic("S3Client.HeadObject: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.HeadObjectOverride = fn
}

func (_recv *S3Client) ListBucketAnalyticsConfigurations(ctx context.Context, params *s3.ListBucketAnalyticsConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
	if _recv == nil {
		panic("S3Client.ListBucketAnalyticsConfigurations: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.ListBucketAnalyticsConfigurationsOverride != nil {
		return _dat.ListBucketAnalyticsConfigurationsOverride(ctx, params, optFns...)
	}
	return _recv.Client.ListBucketAnalyticsConfigurations(ctx, params, optFns...)
}

func (_recv *S3Client) _ListBucketAnalyticsConfigurations_Patch(fn func (ctx context.Context, params *s3.ListBucketAnalyticsConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketAnalyticsConfigurationsOutput, error)) {
	if _recv == nil {
		panic("S3Client.ListBucketAnalyticsConfigurations: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.ListBucketAnalyticsConfigurationsOverride = fn
}

func (_recv *S3Client) ListBucketIntelligentTieringConfigurations(ctx context.Context, params *s3.ListBucketIntelligentTieringConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error) {
	if _recv == nil {
		panic("S3Client.ListBucketIntelligentTieringConfigurations: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.ListBucketIntelligentTieringConfigurationsOverride != nil {
		return _dat.ListBucketIntelligentTieringConfigurationsOverride(ctx, params, optFns...)
	}
	return _recv.Client.ListBucketIntelligentTieringConfigurations(ctx, params, optFns...)
}

func (_recv *S3Client) _ListBucketIntelligentTieringConfigurations_Patch(fn func (ctx context.Context, params *s3.ListBucketIntelligentTieringConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error)) {
	if _recv == nil {
		panic("S3Client.ListBucketIntelligentTieringConfigurations: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.ListBucketIntelligentTieringConfigurationsOverride = fn
}

func (_recv *S3Client) ListBucketInventoryConfigurations(ctx context.Context, params *s3.ListBucketInventoryConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketInventoryConfigurationsOutput, error) {
	if _recv == nil {
		panic("S3Client.ListBucketInventoryConfigurations: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.ListBucketInventoryConfigurationsOverride != nil {
		return _dat.ListBucketInventoryConfigurationsOverride(ctx, params, optFns...)
	}
	return _recv.Client.ListBucketInventoryConfigurations(ctx, params, optFns...)
}

func (_recv *S3Client) _ListBucketInventoryConfigurations_Patch(fn func (ctx context.Context, params *s3.ListBucketInventoryConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketInventoryConfigurationsOutput, error)) {
	if _recv == nil {
		panic("S3Client.ListBucketInventoryConfigurations: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.ListBucketInventoryConfigurationsOverride = fn
}

func (_recv *S3Client) ListBucketMetricsConfigurations(ctx context.Context, params *s3.ListBucketMetricsConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketMetricsConfigurationsOutput, error) {
	if _recv == nil {
		panic("S3Client.ListBucketMetricsConfigurations: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.ListBucketMetricsConfigurationsOverride != nil {
		return _dat.ListBucketMetricsConfigurationsOverride(ctx, params, optFns...)
	}
	return _recv.Client.ListBucketMetricsConfigurations(ctx, params, optFns...)
}

func (_recv *S3Client) _ListBucketMetricsConfigurations_Patch(fn func (ctx context.Context, params *s3.ListBucketMetricsConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketMetricsConfigurationsOutput, error)) {
	if _recv == nil {
		panic("S3Client.ListBucketMetricsConfigurations: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.ListBucketMetricsConfigurationsOverride = fn
}

func (_recv *S3Client) ListBuckets(ctx context.Context, params *s3.ListBucketsInput, optFns ...func(*s3.Options)) (*s3.ListBucketsOutput, error) {
	if _recv == nil {
		panic("S3Client.ListBuckets: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.ListBucketsOverride != nil {
		return _dat.ListBucketsOverride(ctx, params, optFns...)
	}
	return _recv.Client.ListBuckets(ctx, params, optFns...)
}

func (_recv *S3Client) _ListBuckets_Patch(fn func (ctx context.Context, params *s3.ListBucketsInput, optFns ...func(*s3.Options)) (*s3.ListBucketsOutput, error)) {
	if _recv == nil {
		panic("S3Client.ListBuckets: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.ListBucketsOverride = fn
}

func (_recv *S3Client) ListMultipartUploads(ctx context.Context, params *s3.ListMultipartUploadsInput, optFns ...func(*s3.Options)) (*s3.ListMultipartUploadsOutput, error) {
	if _recv == nil {
		panic("S3Client.ListMultipartUploads: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.ListMultipartUploadsOverride != nil {
		return _dat.ListMultipartUploadsOverride(ctx, params, optFns...)
	}
	return _recv.Client.ListMultipartUploads(ctx, params, optFns...)
}

func (_recv *S3Client) _ListMultipartUploads_Patch(fn func (ctx context.Context, params *s3.ListMultipartUploadsInput, optFns ...func(*s3.Options)) (*s3.ListMultipartUploadsOutput, error)) {
	if _recv == nil {
		panic("S3Client.ListMultipartUploads: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.ListMultipartUploadsOverride = fn
}

func (_recv *S3Client) ListObjectVersions(ctx context.Context, params *s3.ListObjectVersionsInput, optFns ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error) {
	if _recv == nil {
		panic("S3Client.ListObjectVersions: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.ListObjectVersionsOverride != nil {
		return _dat.ListObjectVersionsOverride(ctx, params, optFns...)
	}
	return _recv.Client.ListObjectVersions(ctx, params, optFns...)
}

func (_recv *S3Client) _ListObjectVersions_Patch(fn func (ctx context.Context, params *s3.ListObjectVersionsInput, optFns ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error)) {
	if _recv == nil {
		panic("S3Client.ListObjectVersions: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.ListObjectVersionsOverride = fn
}

func (_recv *S3Client) ListObjects(ctx context.Context, params *s3.ListObjectsInput, optFns ...func(*s3.Options)) (*s3.ListObjectsOutput, error) {
	if _recv == nil {
		panic("S3Client.ListObjects: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.ListObjectsOverride != nil {
		return _dat.ListObjectsOverride(ctx, params, optFns...)
	}
	return _recv.Client.ListObjects(ctx, params, optFns...)
}

func (_recv *S3Client) _ListObjects_Patch(fn func (ctx context.Context, params *s3.ListObjectsInput, optFns ...func(*s3.Options)) (*s3.ListObjectsOutput, error)) {
	if _recv == nil {
		panic("S3Client.ListObjects: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.ListObjectsOverride = fn
}

func (_recv *S3Client) ListObjectsV2(ctx context.Context, params *s3.ListObjectsV2Input, optFns ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
	if _recv == nil {
		panic("S3Client.ListObjectsV2: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.ListObjectsV2Override != nil {
		return _dat.ListObjectsV2Override(ctx, params, optFns...)
	}
	return _recv.Client.ListObjectsV2(ctx, params, optFns...)
}

func (_recv *S3Client) _ListObjectsV2_Patch(fn func (ctx context.Context, params *s3.ListObjectsV2Input, optFns ...func(*s3.Options)) (*s3.ListObjectsV2Output, error)) {
	if _recv == nil {
		panic("S3Client.ListObjectsV2: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.ListObjectsV2Override = fn
}

func (_recv *S3Client) ListParts(ctx context.Context, params *s3.ListPartsInput, optFns ...func(*s3.Options)) (*s3.ListPartsOutput, error) {
	if _recv == nil {
		panic("S3Client.ListParts: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.ListPartsOverride != nil {
		return _dat.ListPartsOverride(ctx, params, optFns...)
	}
	return _recv.Client.ListParts(ctx, params, optFns...)
}

func (_recv *S3Client) _ListParts_Patch(fn func (ctx context.Context, params *s3.ListPartsInput, optFns ...func(*s3.Options)) (*s3.ListPartsOutput, error)) {
	if _recv == nil {
		panic("S3Client.ListParts: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.ListPartsOverride = fn
}

func (_recv *S3Client) PutBucketAccelerateConfiguration(ctx context.Context, params *s3.PutBucketAccelerateConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketAccelerateConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketAccelerateConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketAccelerateConfigurationOverride != nil {
		return _dat.PutBucketAccelerateConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketAccelerateConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketAccelerateConfiguration_Patch(fn func (ctx context.Context, params *s3.PutBucketAccelerateConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketAccelerateConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketAccelerateConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketAccelerateConfigurationOverride = fn
}

func (_recv *S3Client) PutBucketAcl(ctx context.Context, params *s3.PutBucketAclInput, optFns ...func(*s3.Options)) (*s3.PutBucketAclOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketAcl: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketAclOverride != nil {
		return _dat.PutBucketAclOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketAcl(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketAcl_Patch(fn func (ctx context.Context, params *s3.PutBucketAclInput, optFns ...func(*s3.Options)) (*s3.PutBucketAclOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketAcl: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketAclOverride = fn
}

func (_recv *S3Client) PutBucketAnalyticsConfiguration(ctx context.Context, params *s3.PutBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketAnalyticsConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketAnalyticsConfigurationOverride != nil {
		return _dat.PutBucketAnalyticsConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketAnalyticsConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketAnalyticsConfiguration_Patch(fn func (ctx context.Context, params *s3.PutBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketAnalyticsConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketAnalyticsConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketAnalyticsConfigurationOverride = fn
}

func (_recv *S3Client) PutBucketCors(ctx context.Context, params *s3.PutBucketCorsInput, optFns ...func(*s3.Options)) (*s3.PutBucketCorsOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketCors: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketCorsOverride != nil {
		return _dat.PutBucketCorsOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketCors(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketCors_Patch(fn func (ctx context.Context, params *s3.PutBucketCorsInput, optFns ...func(*s3.Options)) (*s3.PutBucketCorsOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketCors: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketCorsOverride = fn
}

func (_recv *S3Client) PutBucketEncryption(ctx context.Context, params *s3.PutBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.PutBucketEncryptionOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketEncryption: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketEncryptionOverride != nil {
		return _dat.PutBucketEncryptionOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketEncryption(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketEncryption_Patch(fn func (ctx context.Context, params *s3.PutBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.PutBucketEncryptionOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketEncryption: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketEncryptionOverride = fn
}

func (_recv *S3Client) PutBucketIntelligentTieringConfiguration(ctx context.Context, params *s3.PutBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketIntelligentTieringConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketIntelligentTieringConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketIntelligentTieringConfigurationOverride != nil {
		return _dat.PutBucketIntelligentTieringConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketIntelligentTieringConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketIntelligentTieringConfiguration_Patch(fn func (ctx context.Context, params *s3.PutBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketIntelligentTieringConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketIntelligentTieringConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketIntelligentTieringConfigurationOverride = fn
}

func (_recv *S3Client) PutBucketInventoryConfiguration(ctx context.Context, params *s3.PutBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketInventoryConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketInventoryConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketInventoryConfigurationOverride != nil {
		return _dat.PutBucketInventoryConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketInventoryConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketInventoryConfiguration_Patch(fn func (ctx context.Context, params *s3.PutBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketInventoryConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketInventoryConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketInventoryConfigurationOverride = fn
}

func (_recv *S3Client) PutBucketLifecycleConfiguration(ctx context.Context, params *s3.PutBucketLifecycleConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketLifecycleConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketLifecycleConfigurationOverride != nil {
		return _dat.PutBucketLifecycleConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketLifecycleConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketLifecycleConfiguration_Patch(fn func (ctx context.Context, params *s3.PutBucketLifecycleConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketLifecycleConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketLifecycleConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketLifecycleConfigurationOverride = fn
}

func (_recv *S3Client) PutBucketLogging(ctx context.Context, params *s3.PutBucketLoggingInput, optFns ...func(*s3.Options)) (*s3.PutBucketLoggingOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketLogging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketLoggingOverride != nil {
		return _dat.PutBucketLoggingOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketLogging(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketLogging_Patch(fn func (ctx context.Context, params *s3.PutBucketLoggingInput, optFns ...func(*s3.Options)) (*s3.PutBucketLoggingOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketLogging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketLoggingOverride = fn
}

func (_recv *S3Client) PutBucketMetricsConfiguration(ctx context.Context, params *s3.PutBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketMetricsConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketMetricsConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketMetricsConfigurationOverride != nil {
		return _dat.PutBucketMetricsConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketMetricsConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketMetricsConfiguration_Patch(fn func (ctx context.Context, params *s3.PutBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketMetricsConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketMetricsConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketMetricsConfigurationOverride = fn
}

func (_recv *S3Client) PutBucketNotificationConfiguration(ctx context.Context, params *s3.PutBucketNotificationConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketNotificationConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketNotificationConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketNotificationConfigurationOverride != nil {
		return _dat.PutBucketNotificationConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketNotificationConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketNotificationConfiguration_Patch(fn func (ctx context.Context, params *s3.PutBucketNotificationConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketNotificationConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketNotificationConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketNotificationConfigurationOverride = fn
}

func (_recv *S3Client) PutBucketOwnershipControls(ctx context.Context, params *s3.PutBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.PutBucketOwnershipControlsOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketOwnershipControls: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketOwnershipControlsOverride != nil {
		return _dat.PutBucketOwnershipControlsOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketOwnershipControls(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketOwnershipControls_Patch(fn func (ctx context.Context, params *s3.PutBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.PutBucketOwnershipControlsOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketOwnershipControls: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketOwnershipControlsOverride = fn
}

func (_recv *S3Client) PutBucketPolicy(ctx context.Context, params *s3.PutBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.PutBucketPolicyOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketPolicy: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketPolicyOverride != nil {
		return _dat.PutBucketPolicyOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketPolicy(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketPolicy_Patch(fn func (ctx context.Context, params *s3.PutBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.PutBucketPolicyOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketPolicy: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketPolicyOverride = fn
}

func (_recv *S3Client) PutBucketReplication(ctx context.Context, params *s3.PutBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.PutBucketReplicationOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketReplication: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketReplicationOverride != nil {
		return _dat.PutBucketReplicationOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketReplication(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketReplication_Patch(fn func (ctx context.Context, params *s3.PutBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.PutBucketReplicationOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketReplication: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketReplicationOverride = fn
}

func (_recv *S3Client) PutBucketRequestPayment(ctx context.Context, params *s3.PutBucketRequestPaymentInput, optFns ...func(*s3.Options)) (*s3.PutBucketRequestPaymentOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketRequestPayment: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketRequestPaymentOverride != nil {
		return _dat.PutBucketRequestPaymentOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketRequestPayment(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketRequestPayment_Patch(fn func (ctx context.Context, params *s3.PutBucketRequestPaymentInput, optFns ...func(*s3.Options)) (*s3.PutBucketRequestPaymentOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketRequestPayment: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketRequestPaymentOverride = fn
}

func (_recv *S3Client) PutBucketTagging(ctx context.Context, params *s3.PutBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.PutBucketTaggingOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketTagging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketTaggingOverride != nil {
		return _dat.PutBucketTaggingOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketTagging(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketTagging_Patch(fn func (ctx context.Context, params *s3.PutBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.PutBucketTaggingOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketTagging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketTaggingOverride = fn
}

func (_recv *S3Client) PutBucketVersioning(ctx context.Context, params *s3.PutBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.PutBucketVersioningOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketVersioning: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketVersioningOverride != nil {
		return _dat.PutBucketVersioningOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketVersioning(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketVersioning_Patch(fn func (ctx context.Context, params *s3.PutBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.PutBucketVersioningOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketVersioning: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketVersioningOverride = fn
}

func (_recv *S3Client) PutBucketWebsite(ctx context.Context, params *s3.PutBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.PutBucketWebsiteOutput, error) {
	if _recv == nil {
		panic("S3Client.PutBucketWebsite: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutBucketWebsiteOverride != nil {
		return _dat.PutBucketWebsiteOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutBucketWebsite(ctx, params, optFns...)
}

func (_recv *S3Client) _PutBucketWebsite_Patch(fn func (ctx context.Context, params *s3.PutBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.PutBucketWebsiteOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutBucketWebsite: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutBucketWebsiteOverride = fn
}

func (_recv *S3Client) PutObject(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
	if _recv == nil {
		panic("S3Client.PutObject: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutObjectOverride != nil {
		return _dat.PutObjectOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutObject(ctx, params, optFns...)
}

func (_recv *S3Client) _PutObject_Patch(fn func (ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutObject: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutObjectOverride = fn
}

func (_recv *S3Client) PutObjectAcl(ctx context.Context, params *s3.PutObjectAclInput, optFns ...func(*s3.Options)) (*s3.PutObjectAclOutput, error) {
	if _recv == nil {
		panic("S3Client.PutObjectAcl: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutObjectAclOverride != nil {
		return _dat.PutObjectAclOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutObjectAcl(ctx, params, optFns...)
}

func (_recv *S3Client) _PutObjectAcl_Patch(fn func (ctx context.Context, params *s3.PutObjectAclInput, optFns ...func(*s3.Options)) (*s3.PutObjectAclOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutObjectAcl: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutObjectAclOverride = fn
}

func (_recv *S3Client) PutObjectLegalHold(ctx context.Context, params *s3.PutObjectLegalHoldInput, optFns ...func(*s3.Options)) (*s3.PutObjectLegalHoldOutput, error) {
	if _recv == nil {
		panic("S3Client.PutObjectLegalHold: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutObjectLegalHoldOverride != nil {
		return _dat.PutObjectLegalHoldOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutObjectLegalHold(ctx, params, optFns...)
}

func (_recv *S3Client) _PutObjectLegalHold_Patch(fn func (ctx context.Context, params *s3.PutObjectLegalHoldInput, optFns ...func(*s3.Options)) (*s3.PutObjectLegalHoldOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutObjectLegalHold: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutObjectLegalHoldOverride = fn
}

func (_recv *S3Client) PutObjectLockConfiguration(ctx context.Context, params *s3.PutObjectLockConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutObjectLockConfigurationOutput, error) {
	if _recv == nil {
		panic("S3Client.PutObjectLockConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutObjectLockConfigurationOverride != nil {
		return _dat.PutObjectLockConfigurationOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutObjectLockConfiguration(ctx, params, optFns...)
}

func (_recv *S3Client) _PutObjectLockConfiguration_Patch(fn func (ctx context.Context, params *s3.PutObjectLockConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutObjectLockConfigurationOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutObjectLockConfiguration: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutObjectLockConfigurationOverride = fn
}

func (_recv *S3Client) PutObjectRetention(ctx context.Context, params *s3.PutObjectRetentionInput, optFns ...func(*s3.Options)) (*s3.PutObjectRetentionOutput, error) {
	if _recv == nil {
		panic("S3Client.PutObjectRetention: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutObjectRetentionOverride != nil {
		return _dat.PutObjectRetentionOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutObjectRetention(ctx, params, optFns...)
}

func (_recv *S3Client) _PutObjectRetention_Patch(fn func (ctx context.Context, params *s3.PutObjectRetentionInput, optFns ...func(*s3.Options)) (*s3.PutObjectRetentionOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutObjectRetention: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutObjectRetentionOverride = fn
}

func (_recv *S3Client) PutObjectTagging(ctx context.Context, params *s3.PutObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.PutObjectTaggingOutput, error) {
	if _recv == nil {
		panic("S3Client.PutObjectTagging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutObjectTaggingOverride != nil {
		return _dat.PutObjectTaggingOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutObjectTagging(ctx, params, optFns...)
}

func (_recv *S3Client) _PutObjectTagging_Patch(fn func (ctx context.Context, params *s3.PutObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.PutObjectTaggingOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutObjectTagging: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutObjectTaggingOverride = fn
}

func (_recv *S3Client) PutPublicAccessBlock(ctx context.Context, params *s3.PutPublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.PutPublicAccessBlockOutput, error) {
	if _recv == nil {
		panic("S3Client.PutPublicAccessBlock: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.PutPublicAccessBlockOverride != nil {
		return _dat.PutPublicAccessBlockOverride(ctx, params, optFns...)
	}
	return _recv.Client.PutPublicAccessBlock(ctx, params, optFns...)
}

func (_recv *S3Client) _PutPublicAccessBlock_Patch(fn func (ctx context.Context, params *s3.PutPublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.PutPublicAccessBlockOutput, error)) {
	if _recv == nil {
		panic("S3Client.PutPublicAccessBlock: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.PutPublicAccessBlockOverride = fn
}

func (_recv *S3Client) RestoreObject(ctx context.Context, params *s3.RestoreObjectInput, optFns ...func(*s3.Options)) (*s3.RestoreObjectOutput, error) {
	if _recv == nil {
		panic("S3Client.RestoreObject: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.RestoreObjectOverride != nil {
		return _dat.RestoreObjectOverride(ctx, params, optFns...)
	}
	return _recv.Client.RestoreObject(ctx, params, optFns...)
}

func (_recv *S3Client) _RestoreObject_Patch(fn func (ctx context.Context, params *s3.RestoreObjectInput, optFns ...func(*s3.Options)) (*s3.RestoreObjectOutput, error)) {
	if _recv == nil {
		panic("S3Client.RestoreObject: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.RestoreObjectOverride = fn
}

func (_recv *S3Client) SelectObjectContent(ctx context.Context, params *s3.SelectObjectContentInput, optFns ...func(*s3.Options)) (*s3.SelectObjectContentOutput, error) {
	if _recv == nil {
		panic("S3Client.SelectObjectContent: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.SelectObjectContentOverride != nil {
		return _dat.SelectObjectContentOverride(ctx, params, optFns...)
	}
	return _recv.Client.SelectObjectContent(ctx, params, optFns...)
}

func (_recv *S3Client) _SelectObjectContent_Patch(fn func (ctx context.Context, params *s3.SelectObjectContentInput, optFns ...func(*s3.Options)) (*s3.SelectObjectContentOutput, error)) {
	if _recv == nil {
		panic("S3Client.SelectObjectContent: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.SelectObjectContentOverride = fn
}

func (_recv *S3Client) UploadPart(ctx context.Context, params *s3.UploadPartInput, optFns ...func(*s3.Options)) (*s3.UploadPartOutput, error) {
	if _recv == nil {
		panic("S3Client.UploadPart: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.UploadPartOverride != nil {
		return _dat.UploadPartOverride(ctx, params, optFns...)
	}
	return _recv.Client.UploadPart(ctx, params, optFns...)
}

func (_recv *S3Client) _UploadPart_Patch(fn func (ctx context.Context, params *s3.UploadPartInput, optFns ...func(*s3.Options)) (*s3.UploadPartOutput, error)) {
	if _recv == nil {
		panic("S3Client.UploadPart: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.UploadPartOverride = fn
}

func (_recv *S3Client) UploadPartCopy(ctx context.Context, params *s3.UploadPartCopyInput, optFns ...func(*s3.Options)) (*s3.UploadPartCopyOutput, error) {
	if _recv == nil {
		panic("S3Client.UploadPartCopy: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.UploadPartCopyOverride != nil {
		return _dat.UploadPartCopyOverride(ctx, params, optFns...)
	}
	return _recv.Client.UploadPartCopy(ctx, params, optFns...)
}

func (_recv *S3Client) _UploadPartCopy_Patch(fn func (ctx context.Context, params *s3.UploadPartCopyInput, optFns ...func(*s3.Options)) (*s3.UploadPartCopyOutput, error)) {
	if _recv == nil {
		panic("S3Client.UploadPartCopy: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.UploadPartCopyOverride = fn
}

func (_recv *S3Client) WriteGetObjectResponse(ctx context.Context, params *s3.WriteGetObjectResponseInput, optFns ...func(*s3.Options)) (*s3.WriteGetObjectResponseOutput, error) {
	if _recv == nil {
		panic("S3Client.WriteGetObjectResponse: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	if _dat.WriteGetObjectResponseOverride != nil {
		return _dat.WriteGetObjectResponseOverride(ctx, params, optFns...)
	}
	return _recv.Client.WriteGetObjectResponse(ctx, params, optFns...)
}

func (_recv *S3Client) _WriteGetObjectResponse_Patch(fn func (ctx context.Context, params *s3.WriteGetObjectResponseInput, optFns ...func(*s3.Options)) (*s3.WriteGetObjectResponseOutput, error)) {
	if _recv == nil {
		panic("S3Client.WriteGetObjectResponse: nil pointer receiver")
	}
	_ptr := uintptr(unsafe.Pointer(_recv))
	_val, _ := _S3Client.LoadOrStore(_ptr, new(_S3ClientData))
	_dat := _val.(*_S3ClientData)
	_dat.WriteGetObjectResponseOverride = fn
}

